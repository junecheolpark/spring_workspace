/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.78
 * Generated at: 2022-07-05 02:40:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/D:/coding/backup/spring_workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/WepChat/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1655173300509L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("		<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-3.6.0.js\"></script>\n");
      out.write("	<title>Home</title>\n");
      out.write("</head>\n");
      out.write(" <style>\n");
      out.write("        *{\n");
      out.write("            box-sizing: border-box;\n");
      out.write("        }\n");
      out.write("        div{\n");
      out.write("            border: 1px solid gray;\n");
      out.write("        }\n");
      out.write("        .chatBox{\n");
      out.write("            width: 400px;\n");
      out.write("            height: 500px;\n");
      out.write("        }\n");
      out.write("        .chatChat{\n");
      out.write("            width: 400px;\n");
      out.write("            height: 400px;\n");
      out.write("            float: bottom;\n");
      out.write("        }\n");
      out.write("        .chatBtnDiv{\n");
      out.write("            width: 80px;\n");
      out.write("            height: 100px;\n");
      out.write("            float: right;\n");
      out.write("        }\n");
      out.write("        .chatBtn{\n");
      out.write("            width: 100%;\n");
      out.write("            height: 100%;\n");
      out.write("            background-color: orange;\n");
      out.write("            border: 0;\n");
      out.write("           \n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("      <div class=\"chatBox\">\n");
      out.write("        <div class=\"chatChat\">\n");
      out.write("            \n");
      out.write("        </div>\n");
      out.write("        <textarea claas=\"message\" id=\"message\">asd</textarea>\n");
      out.write("        <div class=\"chatBtnDiv\">\n");
      out.write("            \n");
      out.write("            <button class=\"chatBtn\" id=\"send\">Send</button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    <script>\n");
      out.write("    	// home.jsp 페이지가 로드됐을때 바로 WebSsocket 접속이 이뤄져 스트림이 생성되고\n");
      out.write("    	// 그후 작성하여 보낸 메세지가 요청이 되거나, 다른 접속자가 보낸 메세지를 응답받을 수 있게 만듦.\n");
      out.write("    	// 웹소켓 객체 생성할때 반드시 서버의 ip 주소값은 실제 ip 주소를 이용\n");
      out.write("    	let ws = new WebSocket(\"ws://192.168.200.175//chat\");\n");
      out.write("    	// 80번 쓰지않으면:8090 이런식으로 써줘야함\n");
      out.write("    	$(\"#send\").click(function(){\n");
      out.write("    		let message = $(\"#message\").val();\n");
      out.write("    		if(message != \"\"){ // message가 빈값이 아닐떄만 전송\n");
      out.write("    			$(\"#message\").val(\"\"); //입력창 비우기\n");
      out.write("    			ws.send(message); //서버의 endpoint에 메세지를 보내는 함수\n");
      out.write("    		}\n");
      out.write("    	})\n");
      out.write("    	\n");
      out.write("    	// endpoint로부터 전송된 메세지 받기\n");
      out.write("    	ws.onmessage = function(message){\n");
      out.write("    		console.log(message.data);\n");
      out.write("    		let msgDiv = $(\"<div>\").append(message.data);\n");
      out.write("    		$(\".chatChat\").append(msgDiv);\n");
      out.write("    	}\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
